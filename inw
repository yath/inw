#!/usr/bin/perl
use strict;
use warnings;
use constant INW => "inotifywait";
use POSIX qw(:sys_wait_h);

my %opts;

# strip arguments out of @ARGV
sub get_args {
    my $optchars = qr/[TMNV]/;
    my $noarg = qr/[NV]/; # options that don't require an argument

    my $nargs = $#ARGV;
    for (my $i = 0; $i <= $nargs; $i++) {
        if ($ARGV[$i] =~ /^-($optchars)(.*)/) {
            my $opt = $1;
            my $optarg = do {
                if ($opt =~ $noarg) {
                    die "Option -$opt must not be followed by an argument" if $2;
                    1;
                } elsif ($2) {
                    $2
                } elsif ($i < $nargs) {
                    $nargs--;
                    splice(@ARGV, $i+1, 1)
                } else {
                    die "Option -$opt requires an argument\n";
                }
            };
            $opts{$opt} = $optarg;
            $nargs--;
            splice(@ARGV, $i, 1);
            $i--; # we have spliced the current argument from
                  # @ARGV, so re-check the new one at $i
        }
    }
}

# print a message if -V is passed
sub msg {
    return unless $opts{V};
    print STDERR @_, "\n";
}

# calls inotifywait, saves the pid of the running process in $pid and
# exits with the return code of inotifywait, if nonzero
my $pid;
sub call_inw {
    msg("calling ".INW. " @_");
    unless ($pid = fork) {
        # child
        exec(INW, @_) or die $!;
    } else {
        # parent
        wait;
        $pid = undef;
        my $rc = ${^CHILD_ERROR_NATIVE};
        if ($rc) {
            if (WIFEXITED($rc)) {
                exit WEXITSTATUS($rc);
            } elsif (WIFSIGNALED($rc)) {
                die "child killed by signal ".WTERMSIG($rc)."\n";
            } else {
                die "child exited with \$rc = $rc\n";
            }
            die "unreachable";
        }
    }
}

# kill inotifywait child if running
END {
    if ($pid) {
        msg("killing ".INW." with pid $pid");
        kill "TERM", $pid;
    }
}

# exit with a message
sub exit_msg {
    msg(@_);
    exit 0;
}

#######################################################################

# parse and check arguments
get_args;
my $t = $opts{T};
die "-T requires a numeric argument\n" if $t && $t !~ /^[0-9]+$/;
my $m = $opts{M};
die "-M requires a numeric argument\n" if $m && $m !~ /^[0-9]+$/;
die "-M makes no sense without -T\n" if $m && !$t;
die "-M must not be smaller than or equal to -T\n" if $t && $m && ($m <= $t);
die "-N makes no sense without -T" if $opts{n} && !$t;

# call inotifywait for the first time
call_inw(@ARGV) unless $opts{N};

# if no -T was given we don't need to do anything
exit 0 unless $t;

my $exitat = $m && time+$m;

# alarm handler for timeout because -T was reached
sub exit_t {
    exit_msg("$t seconds after last notify");
}

# alarm handler for timeout because -M was reached
sub exit_m {
    exit_msg("timeout after $m seconds");
}

while (1) {
    # default case: timeout because -T timeout is reached
    my $exitin = $t;
    $SIG{ALRM} = \&exit_t;

    if ($exitat) { # -M given?
        my $togo = $exitat-time; # yes, we may run for $togo seconds from now
        if ($togo > 0 && $togo < $exitin) {
            # ... that's less than for -T, change the alarm timeout and handler
            $exitin = $togo;
            $SIG{ALRM} = \&exit_m;
        } elsif ($togo <= 0) {
            # timed out already
            exit_m;
        }
    }

    alarm $exitin;
    call_inw(@ARGV);
}

die "unreachable";
